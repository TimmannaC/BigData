	
		Kafka Tutorials from The Definitive Guidance Book.
		
		why kafka	?
			- Kafka is like a messaging system in that it lets you publish and subscribe to streams of messages.
			- it is similar to products like ActiveMQ,RabbitMQ.
			
		- Messages & Batches
			- A uint of data in kafka is called as a message.
			- A messages can have an optional bit of metadata, which is referred to as a key.
			- keys are used when messages are to be written to partitions in a more controlled manner.
			- For efficiency, messages are written into kafka in batches.
			
			-- The diff b/w kafka and other messaging products are:
				1) kafka lets you have a central platform that can scale elastically to handle all the streams of data
				2) kafka is a true storage system build to store data for as long as you like.
				
			- Kafka follows publish/subscribe design pattern.
			- Pub/sub systems often have a broker,a central point where messages are published.
			- kafka is often described as a “distributed commit log” or more recently as a “distributing streaming platform.”
			
		- Topics and Partitions
			- Messages in kafka are categorized into topics.
			- The closest analogies for a topic is a folder in a filesystem.
			- Topics are additionally broken down into a number of partitions.
			- a partition is a single log.
			- Messages are written to it in an append-only fashion, and are read in order from beginning to end.
			
			
			
		- Zookeeper Ensemble 
			- A zookeeper cluster is called an ensemble.
			- Due to the alogorithm used, it is recommended that ensemble contains an odd number of servers.
			- To configure Zookeeper servers in an ensemble, they must have a common configration that lists all servers, 
				and each server needs a myid file in the data directory that specifies the ID number of the server.
			- the configuration file might look like this:
				---------------------------------------------
				|	tickTime=2000							|
				|	dataDir=/var/lib/zookeeper				|
				|	clientPort=2181							|
				|	initLimit=20							|
				|	syncLimit=5								|
				|	server.1=zoo1.example.com:2888:3888		|
				|	server.2=zoo2.example.com:2888:3888		|
				|	server.3=zoo3.example.com:2888:3888		|
				---------------------------------------------											
					
					* initLimit --> is the amount of time to allow followers to connect with the leader.
					* syncLimit --> The syncLimit value limits how out-of-sync followers can be with the leader.
					* the configuration also lists each server in the ensemble.
					* The servers are specified in the format server.X=hostname:peerPort:leaderPort
						
						where:
							X => The id number of the server.
							hostname => the hostname or IP address of the server.
							peerPort => the TCP port over which servers in the ensemble communicate with each other.
							leaderPort => The TCP port over which leader election is performed.
							
				- Clients only need to be able to connect to the ensemble over the clientPort, but the members of the ensemble must be able to
					communicate with each other over all the three ports.
				- In addition to the shared configuration file, each server must have a file in the data directory with the name myid.
				- The file must contain the ID number of the server, which must match the configuration file.
					
					
		- Installing and running the kafka broker.
			- To run the kafka broker
				- /bin/kafka-server-start.sh conf/server.properties
			
			- Create and verify a topic
				kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
			
			- Produce messages to test a topic
				kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
					Test Message 1
					Test Message 2
			
			- Consumers messages from a test topic 
				kafka/bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning
													(or) 
				kafka/bin/kafka-console-consumer.sh	--bootstrap-server localhost:9092 --topic test --from-beginning (New API)
					Test Message 1
					Test MEssage 2
					
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
